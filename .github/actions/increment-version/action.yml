# Create a composite action that increments the build number or version number in the app.json file depending on the input

name: Increment Version
description: Increments the build number or version number in the app.json file depending on the input

inputs:
  increment-version:
    description: Whether to increment the version number (true or false)
    required: false
    default: "false"
  increment-version-type:
    description: The type of value to increment (major or minor or patch)
    # If increment-version is true, this input is required
    required: false
    default: "minor"
  increment-build-number:
    description: Whether to increment the build number (true or false)
    required: false
    default: "false"
  github-admin-token:
    description: The GitHub token with admin permissions
    required: true
  branch-to-push-changes-to:
    description: The branch to push the changes to
    required: true

runs:
  using: composite
  steps:
    - name: Get current version and build number
      id: get-current-version-info
      uses: ./.github/actions/get-current-version-info
    - name: Increment version
      id: increment-version
      if: inputs.increment-version == 'true'
      run: |
        currentVersion=$(jq -r '.expo.version' app.json)
        IFS='.' read -r -a versionParts <<< "$currentVersion"
        
        case "${{ inputs.increment-version-type }}" in
          major)
            versionParts[0]=$((versionParts[0] + 1))
            versionParts[1]=0
            versionParts[2]=0
            ;;
          minor)
            versionParts[1]=$((versionParts[1] + 1))
            versionParts[2]=0
            ;;
          patch)
            versionParts[2]=$((versionParts[2] + 1))
            ;;
          *)
            echo "Invalid version type. Use 'major', 'minor', or 'patch'."
            exit 1
            ;;
        esac

        newVersion=$(IFS=. ; echo "${versionParts[*]}")
        jq --arg newVersion "$newVersion" '.expo.version = $newVersion' app.json > temp.json && mv temp.json app.json
        echo "version=$newVersion" >> $GITHUB_OUTPUT
      shell: bash
    - name: Increment build number
      id: increment-build-number
      if: inputs.increment-build-number == 'true'
      run: |
        currentBuildNumber=${{ steps.get-current-version-info.outputs.build-number }}
        if [ -z "$currentBuildNumber" ]; then
          currentBuildNumber=0
        fi
        newBuildNumber=$((currentBuildNumber + 1))
        jq --arg newBuildNumber "$newBuildNumber" '.expo.ios.buildNumber = $newBuildNumber' app.json > temp.json && mv temp.json app.json
        echo "build-number=$newBuildNumber" >> $GITHUB_OUTPUT
      shell: bash
    - name: Get Commit Message
      id: get-commit-message
      if: inputs.increment-version == 'true' || inputs.increment-build-number == 'true'
      run: |

        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        commit_message="Incremented"

        if [ "${{ inputs.increment-version }}" == "true" ]; then
          commit_message+=" version"
        fi

        if [ "${{ inputs.increment-build-number }}" == "true" ]; then
          if [ "$commit_message" != "Incremented" ]; then
            commit_message+=" and"
          fi
          commit_message+=" build number"
        fi

        commit_message+="."

        echo "commit-message=$commit_message" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create a new tree
      id: create-tree
      if: inputs.increment-version == 'true' || inputs.increment-build-number == 'true'
      run: |
        BASE_TREE=$(git rev-parse HEAD)
        CONTENT=$(cat app.json | jq -Rs .)
        RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ inputs.github-admin-token }}" \
          -d "{\"base_tree\":\"$BASE_TREE\",\"tree\":[{\"path\":\"app.json\",\"mode\":\"100644\",\"type\":\"blob\",\"content\":$CONTENT}]}" \
          https://api.github.com/repos/${{ github.repository }}/git/trees)          
        TREE_SHA_NEW=$(echo "$RESPONSE" | jq -r '.sha')
        echo "TREE_SHA_NEW=$TREE_SHA_NEW" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create a new commit
      id: create-commit
      if: inputs.increment-version == 'true' || inputs.increment-build-number == 'true'
      run: |
        COMMIT_PAYLOAD=$(printf '{"message":"${{ steps.get-commit-message.outputs.commit-message }}","tree":"%s","parents":["%s"]}' "${{ steps.create-tree.outputs.TREE_SHA_NEW }}" "$(git rev-parse HEAD)")

        RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ inputs.github-admin-token }}" \
          -d "$COMMIT_PAYLOAD" \
          https://api.github.com/repos/${{ github.repository }}/git/commits)

        
        COMMIT_SHA=$(echo "$RESPONSE" | jq -r '.sha')
        echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
      shell: bash

    
    - name: Update branch reference
      id: update-branch-reference
      if: inputs.increment-version == 'true' || inputs.increment-build-number == 'true'
      run: |
        curl -X PATCH -H "Authorization: token ${{ inputs.github-admin-token }}" \
        -d "{\"sha\": \"${{ steps.create-commit.outputs.COMMIT_SHA }}\", \"force\": true}" \
        https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ inputs.branch-to-push-changes-to }}
      shell: bash